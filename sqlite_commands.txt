SQLONLINE.COM
ravi.chirap@gmail.com/INDIA143
C:\sqlite>sqlite3

sqlite> .help

sqlite> .quit

c:\sqlite>sqlite3 c:\sqlite\db\chinook.db

sqlite> .schema albums
INSERT INTO `users`(id,city_id,first_name,last_name) VALUES (1,1,'Jhon','Doe'),(2,1,'Albert','Thomson'),
(3,2,'Robert','Ford'),(4,3,'Samantha','Simpson');


**********************************************************************************
JOINS
***********************************************************************************

STUDENTS TABLE

id	name	forum_username
1	Jhon	jj2005
2	Albert	salbert
3	Mathew	powermath
4	Lisa	lisabbc
5	Sandy	imsandyw
6	Tamara	tamy21
COMMENTS TABLE
id	forum_username	comment
1	jj2005	Awesome!
2	jj2005	This is great :)
3	powermath	Hmmm…
4	imsandyw	Let’s wait a moment
5	lisabbc	Sure thing
6	lisabbc	wow!
7	lisabbc	lol :) :) :)

There are several types of JOINs. Let’s review them quickly:

INNER JOIN: This JOIN returns records that have a match in both tables based on the join predicate (which comes after the ON keyword)

For example, if we wanted to know the actual student name for each of the comments in the forum, we would write this JOIN query:

SELECT students.name, comments.forum_username, comments.comment
FROM students 
INNER JOIN comments
  ON students.forum_username = comments.forum_username
ORDER BY students.name ASC;

LEFT [OUTER] JOIN: This will return all records from the left table (i.e. the table you list first in the JOIN) and only matching records from the right (i.e. second) table. The OUTER keyword is optional.

SELECT students.name, comments.forum_username, comments.comment
FROM students 
LEFT JOIN comments
  ON students.forum_username = comments.forum_username
ORDER BY students.name ASC;
This LEFT JOIN would return a record for all students – including Tamara and Albert, who don’t have any comments and wouldn’t be listed in the results of an INNER JOIN. Notice too that in this LEFT JOIN example, Tamara’s and Albert’s comment column results will be NUL

FULL [OUTER] JOIN: This is essentially the combination of a LEFT JOIN and a RIGHT JOIN. The result set will include all rows from both tables, populating the columns with table values when possible or with NULLs when there is no match in the counterpart table. This is not a JOIN you’ll use very often in real life. Note: MySQL lacks this statement, but a similar result can be achieved using the UNION of LEFT JOIN and RIGHT JOIN.

SELECT *
FROM students 
FULL OUTER JOIN comments
  ON students.forum_username = comments.forum_username
ORDER BY students.name ASC;
CROSS JOIN:
 it retrieves the Cartesian product of both tables.(there’s no ON keyword), but it’s still possible to filter rows using WHERE. Doing this could make the result set equivalent to an INNER JOIN. In MySQL, JOIN, CROSS JOIN, and INNER JOIN are syntactic equivalents, i.e. they can replace each other.
SELECT *
FROM students 
CROSS JOIN comments 
ORDER BY students.name ASC;


 couple of useful tips:
1.The columns used to link tables should be indexed for greater performance.

2.When the columns that link the tables (like the former example) are pointing to the primary key of the related table, then we are talking about foreign keys. In this case, it is better to include this relationship as part of your table definition; it will increase performance.

state
id statename
1|Nevada
2|Florida
3|California

cities
id cityname  state_id
1|Miami|1
2|Orlando|1
3|Las Vegas|2
4|Coyote Springs|2

users
id    first_name    last_name city_id
1|Jhon|Doe|1
2|Albert|Thomson|1
3|Robert|Ford|2
4|Samantha|Simpson|3

In MySQL, you can create a users/city foreign key like this:
ALTER TABLE `users` 
ADD INDEX `fk_city_idx` (`city_id` ASC);
ALTER TABLE `users` 
ADD CONSTRAINT `fk_city`
  FOREIGN KEY (`city_id`)
  REFERENCES `cities` (`id`)
  ON DELETE CASCADE
  ON UPDATE CASCADE;
This gives you the additional benefit of the integrity check that will be performed by the engine when data in these tables is updated or deleted.


Suppose we want to find all the users in one state. You add a filtering condition to the query, as shown below:

SELECT 
  User.first_name,
  user.last_name,
  City.cityname,
  State.statename
FROM users User
INNER JOIN cities City
  ON User.city_id = City.id
INNER JOIN states State
  ON City.state_id = State.id
  AND State.statename = 'Nevada';

Or you could even use an implicit join (shown in bold text), like this:
SELECT 
  User.first_name,
  user.last_name,
  City.cityname,
  State.statename
FROM
   users User,
   cities City,
   states State
WHERE User.city_id = City.id
  AND City.state_id = State.id
  AND State.statename = 'Nevada';	
But I’d suggest you explicitly write the JOIN and keep the joining criteria and the filtering conditions separate:
SELECT 
  User.first_name,
  user.last_name,
  City.cityname,
  State.statename
FROM users User
INNER JOIN cities City
  ON User.city_id = City.id
INNER JOIN states State
  ON City.state_id = State.id
WHERE State.statename = 'Nevada';

A general rule of thumb is that the JOIN predicates (the conditions after the ON keyword) should be used for the joining relationship only. Leave the rest of the filtering conditions inside the WHERE section. This will simplify query readability and future code maintenance.

Conversely, we could return states based on certain criteria. For instance, we could retrieve states that have at least one user belonging to that state:

SELECT 
  DISTINCT State.statename
FROM states State
INNER JOIN cities City
  ON City.state_id = State.id
INNER JOIN users User
  ON User.city_id = City.id

What do we learn here?

The INNER JOIN removes any “unused” or unmatched records (records without a match on both sides of the JOIN).
DISTINCT filters out duplicate records. Since there could be several users for a state, if we didn’t use DISTINCT we would get as many repeated states as users belonging to it. (The same filtering effect could also be achieved using GROUP BY.)
Further filtering could be accomplished by adding WHERE conditions.  02












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































