http://dev.fyicenter.com/Interview-Questions/Python/How_do_I_use_strings_to_call_functions_methods_.html
How do I use strings to call functions/methods?
How do I write a function with output parameters (call by reference)?






What is Python?

Python is an interpreted, interactive, object-oriented programming language. It incorporates modules, exceptions, dynamic typing, very high level dynamic data types, and classes. Python combines remarkable power with very clear syntax. It has interfaces to many system calls and libraries, as well as to various window systems, and is extensible in C or C++. It is also usable as an extension language for applications that need a programmable interface. Finally, Python is portable: it runs on many Unix variants, on the Mac, and on PCs under MS-DOS, Windows, Windows NT, and OS/2.
Is there a tool to help find bugs or perform static analysis?

Yes.
PyChecker is a static analysis tool that finds bugs in Python source code and warns about code complexity and style.

Pylint is another tool that checks if a module satisfies a coding standard, and also makes it possible to write plug-ins to add a custom feature.
How do you set a global variable in a function?
Any variable assigned in a function is local to that function. unless it is specifically declared global. Since a value is bound to x as the last statement of the function body, the compiler assumes that x is local. Consequently the print x attempts to print an uninitialized local variable and will trigger a NameError.
The solution is to insert an explicit global declaration at the start of the function:
def f():
global x
What are the rules for local and global variables in Python?

In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a new value anywhere within the function's body, it's assumed to be a local. If a variable is ever assigned a new value inside the function, the variable is implicitly local, and you need to explicitly declare it as 'global'.
Though a bit surprising at first, a moment's consideration explains this. On one hand, requiring global for assigned variables provides a bar against unintended side-effects. On the other hand, if global was required for all global references, you'd be using global all the time. You'd have to declare as global every reference to a builtin function or to a component of an imported module. This clutter would defeat the usefulness of the global declaration for identifying side-effects.
How do I share global variables across modules?

The canonical way to share information across modules within a single program is to create a special module (often called config or cfg). Just import the config module in all modules of your application; the module then becomes available as a global name. Because there is only one instance of each module, any changes made to the module object get reflected everywhere. For example:

config.py:
x = 0 # Default value of the 'x' configuration setting
mod.py:
import config
config.x = 1

main.py:
import config
import mod
print config.x

Note that using a module is also the basis for implementing the Singleton design pattern, for the same reason.

How can I pass optional or keyword parameters from one function to another?
Collect the arguments using the * and ** specifiers in the function's parameter list; this gives you the positional arguments as a tuple and the keyword arguments as a dictionary. You can then pass these arguments when calling another function by using * and **:

How do you make a higher order function in Python?

You have two choices: you can use nested scopes or you can use callable objects. For example, suppose you wanted to define linear(a,b) which returns a function f(x) that computes the value a*x+b. Using nested scopes:

def linear(a,b):
def result(x):
return a*x + b
return result

Or using a callable object:

class linear:
def __init__(self, a, b):
self.a, self.b = a,b
def __call__(self, x):
return self.a * x + self.b

In both cases:

taxes = linear(0.3,2)

gives a callable object where taxes(10e6) == 0.3 * 10e6 + 2.

The callable object approach has the disadvantage that it is a bit slower and results in slightly longer code. However, note that a collection of callables can share their signature via inheritance:

class exponential(linear):
# __init__ inherited
def __call__(self, x):
return self.a * (x ** self.b)

Object can encapsulate state for several methods:

class counter:
value = 0
def set(self, x): self.value = x
def up(self): self.value=self.value+1
def down(self): self.value=self.value-1

count = counter()
inc, dec, reset = count.up, count.down, count.set


Here inc(), dec() and reset() act like functions which share the same counting variable.
How do I copy an object in Python?

In general, try copy.copy() or copy.deepcopy() for the general case. Not all objects can be copied, but most can.

Some objects can be copied more easily. Dictionaries have a copy() method:

newdict = olddict.copy()

Sequences can be copied by slicing:

new_l = l[:]
How can I find the methods or attributes of an object?

For an instance x of a user-defined class, dir(x) returns an alphabetized list of the names containing the instance attributes and methods and attributes defined by its clas
How can my code discover the name of an object?

Generally speaking, it can't, because objects don't really have names. Essentially, assignment always binds a name to a value; The same is true of def and class statements, but in that case the value is a callable. Consider the following code:

class A:
pass

B = A

a = B()
b = a
print b
<__main__.A instance at 016D07CC>
print a
<__main__.A instance at 016D07CC>

Arguably the class has a name: even though it is bound to two names and invoked through the name B the created instance is still reported as an instance of class A. However, it is impossible to say whether the instance's name is a or b, since both names are bound to the same value.

Generally speaking it should not be necessary for your code to "know the names" of particular values. Unless you are deliberately writing introspective programs, this is usually an indication that a change of approach might be beneficial.

In comp.lang.python, Fredrik Lundh once gave an excellent analogy in answer to this question:

The same way as you get the name of that cat you found on your porch: the cat (object) itself cannot tell you its name, and it doesn't really care -- so the only way to find out what it's called is to ask all your neighbours (namespaces) if it's their cat (object)...

....and don't be surprised if you'll find that it's known by many names, or no name at all!

Is there an equivalent of C's "?:" ternary operator?

No

How do I convert a string to a number?

For integers, use the built-in int() type constructor, e.g. int('144') == 144. Similarly, float() converts to floating-point, e.g. float('144') == 144.0.

By default, these interpret the number as decimal, so that int('0144') == 144 and int('0x144') raises ValueError. int(string, base) takes the base to convert from as a second optional argument, so int('0x144', 16) == 324. If the base is specified as 0, the number is interpreted using Python's rules: a leading '0' indicates octal, and '0x' indicates a hex number.

Do not use the built-in function eval() if all you need is to convert strings to numbers. eval() will be significantly slower and it presents a security risk: someone could pass you a Python expression that might have unwanted side effects. For example, someone could pass __import__('os').system("rm -rf $HOME") which would erase your home directory.

eval() also has the effect of interpreting numbers as Python expressions, so that e.g. eval('09') gives a syntax error because Python regards numbers starting with '0' as octal (base 8).

How do I convert a number to a string?

To convert, e.g., the number 144 to the string '144', use the built-in function str(). If you want a hexadecimal or octal representation, use the built-in functions hex() or oct(). For fancy formatting, use the % operator on strings, e.g. "%04d" % 144 yields '0144' and "%.3f" % (1/3.0) yields '0.333'. See the library reference manual for details.

How do I modify a string in place?

You can't, because strings are immutable. If you need an object with this ability, try converting the string to a list or use the array module:

>>> s = "Hello, world"
>>> a = list(s)
>>>print a
['H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd']
>>> a[7:] = list("there!")
>>>''.join(a)
'Hello, there!'


>>> import array
>>> a = array.array('c', s)
>>> print a
array('c', 'Hello, world')
>>> a[0] = 'y' ; print a
array('c', 'yello world')
>>> a.tostring()
'yello, world'

What's the difference between "import foo" and "from foo import *"?
import sys #
This brings the name “sys” into your module.

(Technically, it binds the name “sys” to the object that is the sys module.)

It does not give you direct access to any of the names inside sys itself (such as exit for example). To access those you need to prefix them with sys, as in

sys.exit()
from sys import * #
This does NOT bring the name “sys” into your module, instead it brings all of the names inside sys (like exit for example) into your module. Now you can access those names without a prefix, like this:
exit()
from sys import * #
This does NOT bring the name “sys” into your module, instead it brings all of the names inside sys (like exit for example) into your module. Now you can access those names without a prefix, like this: exit()
this second form will overwrite any names you have already declared — like exit say.
exit = 42
from sys import *   # hides my exit variable.

OR more likely, the other way round
from sys import *
exit = 42   # now hides the sys.exit function so I can't use it.
some modules have the same name in them, for example:
from os import *
Is there a scanf() or sscanf() equivalent?

Not as such.

For simple input parsing, the easiest approach is usually to split the line into whitespace-delimited words using the split() method of string objects and then convert decimal strings to numeric values using int() or float(). split() supports an optional "sep" parameter which is useful if the line uses something other than whitespace as a separator.

For more complicated input parsing, regular expressions more powerful than C's sscanf() and better suited for the task.
How do I convert between tuples and lists?

The function tuple(seq) converts any sequence (actually, any iterable) into a tuple with the same items in the same order.

For example, tuple([1, 2, 3]) yields (1, 2, 3) and tuple('abc') yields ('a', 'b', 'c'). If the argument is a tuple, it does not make a copy but returns the same object, so it is cheap to call tuple() when you aren't sure that an object is already a tuple.

The function list(seq) converts any sequence or iterable into a list with the same items in the same order. For example, list((1, 2, 3)) yields [1, 2, 3] and list('abc') yields ['a', 'b', 'c']. If the argument is a list, it makes a copy just like seq[:] would.

What is a negative index?

Python sequences are indexed with positive numbers and negative numbers. For positive numbers 0 is the first index 1 is the second index and so forth. For negative indices -1 is the last index and -2 is the penultimate (next to last) index and so forth. Think of seq[-n] as the same as seq[len(seq)-n].

Using negative indices can be very convenient. For example S[:-1] is all of the string except for its last character, which is useful for removing the trailing newline from a string
How do I iterate over a sequence in reverse order?

If it is a list, the fastest solution is

list.reverse()
try:
for x in list:
"do something with x"
finally:
list.reverse()

This has the disadvantage that while you are in the loop, the list is temporarily reversed. If you don't like this, you can make a copy. This appears expensive but is actually faster than other solutions:

rev = list[:]
rev.reverse()
for x in rev:
<do something with x>

If it's not a list, a more general but slower solution is:

for i in range(len(sequence)-1, -1, -1):
x = sequence[i]
<do something with x>

A more elegant solution, is to define a class which acts as a sequence and yields the elements in reverse order (solution due to Steve Majewski):

class Rev:
def __init__(self, seq):
self.forw = seq
def __len__(self):
return len(self.forw)
def __getitem__(self, i):
return self.forw[-(i + 1)]

You can now simply write:

for x in Rev(list):
<do something with x>

Unfortunately, this solution is slowest of all, due to the method call overhead.

With Python 2.3, you can use an extended slice syntax:

for x in sequence[::-1]:
<do something with x>

How do you remove duplicates from a list?

If you don't mind reordering the list, sort it and then scan from the end of the list, deleting duplicates as you go:

if List:
List.sort()
last = List[-1]
for i in range(len(List)-2, -1, -1):
if last==List[i]: del List[i]
else: last=List[i]

If all elements of the list may be used as dictionary keys (i.e. they are all hashable) this is often faster

d = {}
for x in List: d[x]=x
List = d.values()
How do you make an array in Python?

Use a list:
["this", 1, "is", "an", "array"]

Lists are equivalent to C or Pascal arrays in their time complexity; the primary difference is that a Python list can contain objects of many different types.

The array module also provides methods for creating arrays of fixed types with compact representations, but they are slower to index than lists. Also note that the Numeric extensions and others define array-like structures with various characteristics as well.

To get Lisp-style linked lists, you can emulate cons cells using tuples:

lisp_list = ("like", ("this", ("example", None) ) )

If mutability is desired, you could use lists instead of tuples. Here the analogue of lisp car is lisp_list[0] and the analogue of cdr is lisp_list[1]. Only do this if you're sure you really need to, because it's usually a lot slower than using Python lists.
How do I apply a method to a sequence of objects?

Use a list comprehension:

result = [obj.method() for obj in List]

More generically, you can try the following function:

def method_map(objects, method, arguments):
"""method_map([a,b], "meth", (1,2)) gives [a.meth(1,2), b.meth(1,2)]"""
nobjects = len(objects)
methods = map(getattr, objects, [method]*nobjects)
return map(apply, methods, [arguments]*nobjects)
How can I sort one list by values from another list?

Merge them into a single list of tuples, sort the resulting list, and then pick out the element you want.

>>> list1 = ["what", "I'm", "sorting", "by"]
>>> list2 = ["something", "else", "to", "sort"]
>>> pairs = zip(list1, list2)
>>> pairs

[('what', 'something'), ("I'm", 'else'), ('sorting', 'to'), ('by', 'sort')] >>> pairs.sort()
>>> result = [ x[1] for x in pairs ]
>>> result
['else', 'sort', 'to', 'something']

An alternative for the last step is:

result = []
for p in pairs: result.append(p[1])

If you find this more legible, you might prefer to use this instead of the final list comprehension. However, it is almost twice as slow for long lists. Why? First, the append() operation has to reallocate memory, and while it uses some tricks to avoid doing that each time, it still has to do it occasionally, and that costs quite a bit. Second, the expression "result.append" requires an extra attribute lookup, and third, there's a speed reduction from having to make all those function calls.
What is a class?

A class is the particular object type created by executing a class statement. Class objects are used as templates to create instance objects, which embody both the data (attributes) and code (methods) specific to a datatype.

A class can be based on one or more other classes, called its base class(es). It then inherits the attributes and methods of its base classes.
What is a method?

A method is a function on some object x that you normally call as x.name(arguments...). Methods are defined as functions inside the class definition:
 What is self?

Self is merely a conventional name for the first argument of a method. A method defined as meth(self, a, b, c) should be called as x.meth(a, b, c) for some instance x of the class in w
How do I check if an object is an instance of a given class or of a subclass of it?

Use the built-in function isinstance(obj, cls). You can check if an object is an instance of any of a number of classes by providing a tuple instead of a single class, e.g. isinstance(obj, (class1, class2, ...)), and can also check whether an object is one of Python's built-in types, e.g. isinstance(obj, str) or isinstance(obj, (int, long, float, complex)).

Note that most programs do not use isinstance() on user-defined classes very often. If you are developing the classes yourself, a more proper object-oriented style is to define methods on the classes that encapsulate a particular behaviour, instead of checking the object's class and doing a different thing based on what class it is. For example, if you have a function that does something:

def search (obj):
if isinstance(obj, Mailbox):
# ... code to search a mailbox
elif isinstance(obj, Document):
# ... code to search a document
elif ...

A better approach is to define a search() method on all the classes and just call it:

class Mailbox:
def search(self):
# ... code to search a mailbox

class Document:
def search(self):
# ... code to search a document

obj.search()
What is delegation?

Delegation is an object oriented technique (also called a design pattern). Let's say you have an object x and want to change the behaviour of just one of its methods. You can create a new class that provides a new implementation of the method you're interested in changing and delegates all other methods to the corresponding method of x.

Python programmers can easily implement delegation. For example, the following class implements a class that behaves like a file but converts all written data to uppercase:

class UpperOut:
def __init__(self, outfile):
self.__outfile = outfile
def write(self, s):
self.__outfile.write(s.upper())
def __getattr__(self, name):
return getattr(self.__outfile, name)

Here the UpperOut class redefines the write() method to convert the argument string to uppercase before calling the underlying self.__outfile.write() method. All other methods are delegated to the underlying self.__outfile object. The delegation is accomplished via the __getattr__ method; consult the language reference for more information about controlling attribute access.

Note that for more general cases delegation can get trickier. When attributes must be set as well as retrieved, the class must define a __settattr__ method too, and it must do so carefully. The basic implementation of __setattr__ is roughly equivalent to the following:

class X:
...
def __setattr__(self, name, value):
self.__dict__[name] = value
...

Most __setattr__ implementations must modify self.__dict__ to store local state for self without causing an infinite recursion.

How do I call a method defined in a base class from a derived class that overrides it?

If you're using new-style classes, use the built-in super() function:

class Derived(Base):
def meth (self):
super(Derived, self).meth()

How can I organize my code to make it easier to change the base class?

You could define an alias for the base class, assign the real base class to it before your class definition, and use the alias throughout your class. Then all you have to change is the value assigned to the alias. Incidentally, this trick is also handy if you want to decide dynamically (e.g. depending on availability of resources) which base class to use. Example:

BaseAlias = <real base class>
class Derived(BaseAlias):
def meth(self):
BaseAlias.meth(self)

How do I create static class data and static class methods?

Static data (in the sense of C++ or Java) is easy; static methods (again in the sense of C++ or Java) are not supported directly.

For static data, simply define a class attribute. To assign a new value to the attribute, you have to explicitly use the class name in the assignment:

class C:
count = 0 # number of times C.__init__ called

def __init__(self):
C.count = C.count + 1

def getcount(self):
return C.count # or return self.count

c.count also refers to C.count for any c such that isinstance(c, C) holds, unless overridden by c itself or by some class on the base-class search path from c.__class__ back to C.

Caution: within a method of C, an assignment like self.count = 42 creates a new and unrelated instance vrbl named "count" in self's own dict. Rebinding of a class-static data name must always specify the class whether inside a method or not:

C.count = 314

Static methods are possible when you're using new-style classes:

class C:
def static(arg1, arg2, arg3):
# No 'self' parameter!
...
static = staticmethod(static)

However, a far more straightforward way to get the effect of a static method is via a simple module-level function:

def getcount():
return C.count

If your code is structured so as to define one class (or tightly related class hierarchy) per module, this supplies the desired encapsulation.
How can I overload constructors (or methods) in Python?

This answer actually applies to all methods, but the question usually comes up first in the context of constructors.

In C++ you'd write

class C {
C() { cout << "No arguments\n"; }
C(int i) { cout << "Argument is " << i << "\n"; }
}

in Python you have to write a single constructor that catches all cases using default arguments. For example:

class C:
def __init__(self, i=None):
if i is None:
print "No arguments"
else:
print "Argument is", i


This is not entirely equivalent, but close enough in practice.

You could also try a variable-length argument list, e.g.

def __init__(self, *args):
....

The same approach works for all method definitions.
When I edit an imported module and reimport it, the changes don't show up. Why does this happen?

For reasons of efficiency as well as consistency, Python only reads the module file on the first time a module is imported. If it didn't, in a program consisting of many modules where each one imports the same basic module, the basic module would be parsed and re-parsed many times. To force rereading of a changed module, do this:

import modname
reload(modname)

Warning: this technique is not 100% fool-proof. In particular, modules containing statements like

from modname import some_objects

will continue to work with the old version of the imported objects. If the module contains class definitions, existing class instances will not be updated to use the new class definition. This can result in the following paradoxical behaviour:

>>> import cls
>>> c = cls.C() # Create an instance of C
>>> reload(cls)
<module 'cls' from 'cls.pyc'>
>>> isinstance(c, cls.C) # isinstance is false?!?
False

The nature of the problem is made clear if you print out the class objects:

>>> c.__class__
<class cls.C at 0x7352a0>
>>> cls.C
<class cls.C at 0x4198d0>
Where is the math.py (socket.py, regex.py, etc.) source file?

There are (at least) three kinds of modules in Python:

1. modules written in Python (.py);
2. modules written in C and dynamically loaded (.dll, .pyd, .so, .sl, etc);
3. modules written in C and linked with the interpreter; to get a list of these, type:
import sys
print sys.builtin_module_names
How do I test a Python program or component?

Python comes with two testing frameworks. The doctest module finds examples in the docstrings for a module and runs them, comparing the output with the expected output given in the docstring.

The unittest module is a fancier testing framework modelled on Java and Smalltalk testing frameworks.

For testing, it helps to write the program so that it may be easily tested by using good modular design. Your program should have almost all functionality encapsulated in either functions or class methods -- and this sometimes has the surprising and delightful effect of making the program run faster (because local variable accesses are faster than global accesses). Furthermore the program should avoid depending on mutating global variables, since this makes testing much more difficult to do.

The "global main logic" of your program may be as simple as

if How do I test a Python program or component?=="__main__":
main_logic()

at the bottom of the main module of your program.

Once your program is organized as a tractable collection of functions and class behaviours you should write test functions that exercise the behaviours. A test suite can be associated with each module which automates a sequence of tests. This sounds like a lot of work, but since Python is so terse and flexible it's surprisingly easy. You can make coding much more pleasant and fun by writing your test functions in parallel with the "production code", since this makes it easy to find bugs and even design flaws earlier.

"Support modules" that are not intended to be the main module of a program may include a self-test of the module.

if How do I test a Python program or component? == "__main__":
self_test()

Even programs that interact with complex external interfaces may be tested when the external interfaces are unavailable by using "fake" interfaces implemented in Python
None of my threads seem to run: why?

As soon as the main thread exits, all threads are killed. Your main thread is running too quickly, giving the threads no time to do any work.

A simple fix is to add a sleep to the end of the program that's long enough for all the threads to finish:

import threading, time

def thread_task(name, n):
for i in range(n): print name, i

for i in range(10):
T = threading.Thread(target=thread_task, args=(str(i), i))
T.start()


time.sleep(10) # <----------------------------!

But now (on many platforms) the threads don't run in parallel, but appear to run sequentially, one at a time! The reason is that the OS thread scheduler doesn't start a new thread until the previous thread is blocked.

A simple fix is to add a tiny sleep to the start of the run function:

def thread_task(name, n):
time.sleep(0.001) # <---------------------!
for i in range(n): print name, i

for i in range(10):
T = threading.Thread(target=thread_task, args=(str(i), i))
T.start()

time.sleep(10)

Instead of trying to guess how long a time.sleep() delay will be enough, it's better to use some kind of semaphore mechanism. One idea is to use the Queue module to create a queue object, let each thread append a token to the queue when it finishes, and let the main thread read as many tokens from the queue as there are threads.
How do I parcel out work among a bunch of worker threads?

Use the Queue module to create a queue containing a list of jobs. The Queue class maintains a list of objects with .put(obj) to add an item to the queue and .get() to return an item. The class will take care of the locking necessary to ensure that each job is handed out exactly once.

Here's a trivial example:

import threading, Queue, time

# The worker thread gets jobs off the queue. When the queue is empty, it
# assumes there will be no more work and exits.
# (Realistically workers will run until terminated.)
def worker ():
print 'Running worker'
time.sleep(0.1)
while True:
try:
arg = q.get(block=False)
except Queue.Empty:
print 'Worker', threading.currentThread(),
print 'queue empty'
break
else:
print 'Worker', threading.currentThread(),
print 'running with argument', arg
time.sleep(0.5)

# Create queue
q = Queue.Queue()

# Start a pool of 5 workers
for i in range(5):
t = threading.Thread(target=worker, name='worker %i' % (i+1))
t.start()

# Begin adding work to the queue
for i in range(50):
q.put(i)

# Give threads time to run
print 'Main thread sleeping'
time.sleep(5)

When run, this will produce the following output:

Running worker Running worker Running worker Running worker Running worker Main thread sleeping Worker <Thread(worker 1, started)> running with argument 0 Worker <Thread(worker 2, started)> running with argument 1 Worker <Thread(worker 3, started)> running with argument 2 Worker <Thread(worker 4, started)> running with argument 3 Worker <Thread(worker 5, started)> running with argument 4 Worker <Thread(worker 1, started)> running with argument 5 ...
How do I delete a file? (And other file questions...)

Use os.remove(filename) or os.unlink(filename);
How do I copy a file?

The shutil module contains a copyfile() function.
How do I read (or write) binary data?

or complex data formats, it's best to use the struct module. It allows you to take a string containing binary data (usually numbers) and convert it to Python objects; and vice versa.

For example, the following code reads two 2-byte integers and one 4-byte integer in big-endian format from a file:

import struct

f = open(filename, "rb") # Open in binary mode for portability
s = f.read(8)
x, y, z = struct.unpack(">hhl", s)


The '>' in the format string forces big-endian data; the letter 'h' reads one "short integer" (2 bytes), and 'l' reads one "long integer" (4 bytes) from the string
How do I send mail from a Python script?

Use the standard library module smtplib.

Here's a very simple interactive mail sender that uses it. This method will work on any host that supports an SMTP listener.

import sys, smtplib

fromaddr = raw_input("From: ")
toaddrs = raw_input("To: ").split(',')
print "Enter message, end with ^D:"
msg = ''
while 1:
line = sys.stdin.readline()
if not line:
break
msg = msg + line

# The actual mail send
server = smtplib.SMTP('localhost')
server.sendmail(fromaddr, toaddrs, msg)
server.quit()

A Unix-only alternative uses sendmail. The location of the sendmail program varies between systems; sometimes it is /usr/lib/sendmail, sometime /usr/sbin/sendmail. The sendmail manual page will help you out. Here's some sample code:

SENDMAIL = "/usr/sbin/sendmail" # sendmail location
import os
p = os.popen("%s -t -i" % SENDMAIL, "w")
p.write("To: receiver@example.com\n")
p.write("Subject: test\n")
p.write("\n") # blank line separating headers from body
p.write("Some text\n")
p.write("some more text\n")
sts = p.close()
if sts != 0:
print "Sendmail exit status", sts
Are there any interfaces to database packages in Python?

Yes.

Python 2.3 includes the bsddb package which provides an interface to the BerkeleyDB library. Interfaces to disk-based hashes such as DBM and GDBM are also included with standard Python.
How do I generate random numbers in Python?

The standard module random implements a random number generator. Usage is simple:

import random
random.random()

This returns a random floating point number in the range [0, 1).
Can I create my own functions in C?

Yes, you can create built-in modules containing functions, variables, exceptions and even new types in C.
Can I create my own functions in C++?

Yes, using the C compatibility features found in C++. Place extern "C" { ... } around the Python include files and put extern "C" before each function that is going to be called by the Python interpreter. Global or static C++ objects with constructors are probably not a good idea.
How can I execute arbitrary Python statements from C?

The highest-level function to do this is PyRun_SimpleString() which takes a single string argument to be executed in the context of the module __main__ and returns 0 for success and -1 when an exception occurred (including SyntaxError). If you want more control, use PyRun_String(); see the source for PyRun_SimpleString() in Python/pythonrun.c.
How do I extract C values from a Python object?

That depends on the object's type. If it's a tuple, PyTupleSize(o) returns its length and PyTuple_GetItem(o, i) returns its i'th item. Lists have similar functions, PyListSize(o) and PyList_GetItem(o, i).

For strings, PyString_Size(o) returns its length and PyString_AsString(o) a pointer to its value. Note that Python strings may contain null bytes so C's strlen() should not be used.

To test the type of an object, first make sure it isn't NULL, and then use PyString_Check(o), PyTuple_Check(o), PyList_Check(o), etc.

There is also a high-level API to Python objects which is provided by the so-called 'abstract' interface -- read Include/abstract.h for further details. It allows interfacing with any kind of Python sequence using calls like PySequence_Length(), PySequence_GetItem(), etc.) as well as many other useful protocols.
How do I interface to C++ objects from Python?

Depending on your requirements, there are many approaches. To do this manually, begin by reading the "Extending and Embedding" document. Realize that for the Python run-time system, there isn't a whole lot of difference between C and C++ -- so the strategy of building a new Python type around a C structure (pointer) type will also work for C++ objects.
Where is Freeze for Windows?

"Freeze" is a program that allows you to ship a Python program as a single stand-alone executable file. It is not a compiler; your programs don't run any faster, but they are more easily distributable, at least to platforms with the same OS and CPU.
Is a *.pyd file the same as a DLL?

Yes, .


BEGINNER LEVEL

What makes Python Object-Oriented?
What is the with statement in Python?
What data type does Python support?
What is recursion?
What is a dictionary in Python?
What is docstring?
.

INTERMEDIATE LEVEL

Explain inheritance in Python?
Explain memory management in Python.
Explain lambda expressions. When would you use one?
What is monkey patching?
What is an iterator & a generator?
Are methods & constructors the same thing?
.

EXPERT LEVEL

What challenges did you face in your best python projects?
What do you know about palindromes? Can you implement one in Python?
What is tuple unpacking?
What is the dogpile effect?
What is pickling & unpickling?
What is unit testing? How will you do it in Python?

 Python-specific questions, here are a few, in no particular order of difficulty or relevancy:


Talk to me about the GIL. How does it impact concurrency in Python? What kinds of applications does it impact more than others?
How does Python's garbage collection work?
What is the difference between range and xrange? How has this changed over time?
Here's a function. Optimize it for me.
How do you iterate over a list and pull element indices at the same time?
I'm getting a maximum recursion depth error for a function. What does this mean? How can I mitigate the problem?
How do you enforce ordering for a dictionary-style object?
How does Python's list.sort work at a high level? Is it stable? What's the runtime?
What's the difference between a list, dictionary, and array in Python?
What does this list comprehension do?
Here's a class hierarchy with some methods defined. When I call this function, what gets printed?
What is monkeypatching? How can you do it in Python?
What are some caveats to pickling? Marshaling?
How many ways can you append or concatenate strings? Which of these ways is fastest? Easiest to read?
Print me the full pathname of every file in this directory tree.
What's wrong with this function?
What's your preferred editor? (vim, of course - anything else and they fail.)

Python

What is Python , Explain features of Python.
How Python is interpreted.
Explain dict.
How to pass optional or keyword arguments.
Explain indexing and slicing.
What is lambda.
Difference between str() and repr().
Explain serialization and deserialization / Pickling and unpicking.
What is list / dict compression.
What are higher ordered functions.
How to copy object in Python. Diff between shallow copy and deep copy.
How to make array in python.
How to generate random numbers.
How to handle exceptions.
When to use list/tuple/set.
Disadvantageous of python.
Diff range() and xrannge()
What is PEP8
What is virtualenv
Diff between Python 2.* and 3.*
What is decorator, usage ?
With statement and its usage.
What is class and what is self.
Explain isinstance()
What is static method, class method and instance method
Treading in python
What are iterators and generators
Explain map, filter,reduce and lambda.
Difference between new styled classed and old styled classes.
What is diff between Python and Java
What is context processor.
What is exec() and eval ()
How to pass command line argument.
What is yield ?
What is ord() and chr()
What are Metaclasses.
What is descriptor ?
Any 10 python packages you have used.
What is namespace in Python? namespace vs scope ?
What is MRO ?
== vs is ?
mutable vs immutable

Django

What is django , why django
Features of django
MVC vs MTV ?
render vs render_to_response
flow of django
what is django-admin and manage.py
django signals
What is middleware and use of it. Custum middleware
Sessions in django
What are template tags
order_by , group_by
How django manage many to many relationships ?
django with multiple database
What are Q objects in django
Detail overview of request and response objects
What are the class based views ?
How to use sessions in django ? Different ways of storing sessions in django?
Model forms ?

Python:
What are list comprehensions ?
When to use list comprehensions and when to avoid list comprehensions ?
Difference between range and xrange ?
What is lambda function ?
What are Map, filter and reduce functions ?
Difference between deep copy and shallow copy ?
What are the different types of exceptions generated in python ?
How to write your own custom exception handling ?
Difference between input and raw_input ?
Why do we write __name__ == "__main__" in a python script ?
Please explain 'with' statement in python
Why does the exception handling have a finally block ?
Does python provide thread safe multi-threading ?
What do you mean by non blocking IO ?
How to use *args and **kwargs in python ?


Django:

What is django middleware ?
What is the difference between syncdb and migrate command ?
What are request middleware and response middleware ?
What do you mean by direct_to_template view in django ?
What are modular class based generic views ?
Why is the CSRF token used in Django ?
What does the collectstatic command do ?
How to change default timezone in django ?
What do you mean by template inheritence in django ?
Why to use template inheritence ?
Does django have a loosely coupled architecture ? Explain the same.
What is the purpose of wsgi.py file in django project ?
What is the difference between absolute path and relative path ?
What is list view in django ?
What is template view in django ?
What do you mean by pagination of resultset ?
How to access a django settings variable ?
Why do we have a "__init__.py" file in a django app ?

HCL Interview Questions For Python[1] Experienced Candiadates

Write a program reverse a string ?
How is Multithreading achieved in Python?
Find count accourance of Palindrome in a list?
How can you build a simple logistic regression model in Python?
Find length of string without using any built in functions?
Which library would you prefer for plotting in Python language: Seaborn or Matplotlib?
Diamond program add,sub,mul,division
What is the main difference between a Pandas series and a single-column DataFrame in Python?
Write a pgm for a list using bubble sort
How can you handle duplicate values in a dataset for a variable in Python?
Wrt a program to shuffle a list without using inbuilt methods?
Can we create a DataFrame with multiple data types in Python? If yes, how can you do it?
write program for overloading?
Why you should use NumPy arrays instead of nested Python lists?
write a program for decorators?
Which scientific libraries in SciPy have you worked with in your project?
Which python library is used for Machine Learning?
How can you train and interpret a linear regression model in SciKit learn?


Some of the most frequently asked Python interview questions are:

Why one should use NumPy arrays instead of nested Python lists?
What is monkey patching? How can you do it in Python?
What is the difference between Xrange() and range()?
How will you perform static analysis in a python application or find bugs?
Name some standard Python errors.
Preparing for Python interview questions well in advance will ensure that you have all the technical answers that are frequently asked by the interviewer.

Python interview preparation tips:

Showcase your python projects
Give an idea to the employer about your ability to write code that is well organized, idiomatic, and readable.
Be well prepared about data structures and algorithms
Stay updated with new updates and tools
Go for Python Certification courses to stand out of the crowd



LIST OF SOME TRICKY Questions IN PYTHON
What is the difference between __getattr__ and __getattribute__ - when are they called ?
What are the conditions under which the the right hand operator family of magic method are called (for instance __radd__, __rmul__)
Under what conditions should you make a class hashable
Explain the difference between a Iterator and Iterable
What is needed to make a class iterable
What is required to make a class a context manager.

Which data structure is the fastest in Python?


https://www.quora.com/profile/Tony-Flury
Define fastest - what are you trying to achieve ? Speed really is dependent on the operation you want to achieve. Speed also depends heavily on your processor speed, memory speed, load etc.It also in many cases can depended on the data being stored.
Some data structures can be very fast for some operations, but don’t support others at all (for instance dicts don’t support slicing or sorting); the choice of data structure really depends on which operations you are trying to use and the type of data you are operating with.
TL; DR - Given all of this, you can make some judgments: In General -

If you have a lot of data items, each of which you can identify with a unique key, you need to do a lot of inserts and deletes and ‘in’ tests, use a dict.
If you need to compare different sets of data to see overlaps, differences etc - use sets
If you have data and you need to regularly slices - use list.
If you have data and you are adding to and removing from the end of the list, and you don’t need to slice - use collections.deque

What is requirement analysis in software engineering, and why is it so important?
Requirements analysis is critical. You get and agree the requirements from the customer, and then work out at an very high level how you will implement those requirements. That is Requirements Analysis.

Without it - you will have a list of statements from the customer of what they want, and no scaffolding to think about the low level design
If you mean “can a variable have more than one value at the same time?’, then yes - if the variable is a container (a list, a set, a hashmap, a tuple, an array or similar).

How do I remove white space from element of list Python . list [0].strip().lower() How do I do it?
If the white space is Only space characters, you can use replace(‘ ‘, ‘’).

If the whitespace could be anything, including tabs etc then I would do :

‘’.join(list[0].lower().split())
No point doing the strip() call when split is going to remove the whitespace anyway.

The above snippet will remove all whitespace.
How do I build an e-commerce website with Django and Python?
carefully.

I would build it in a step by step way :

Customer accounts - make sure that the customer content can’t be seen by other customers; this is all about security and data isolation. Also build password change and reset functionality.
products - make sure that product information can be added and modified easily by administrators (either by a web interface of some other system)
Ordering - make sure that customers (and guest accounts) can order products, cancel orders see the status of orders etc - includes
Recommendations - is your e-commerce system going to have a recommendation system, and what will that be based on.
Payment - build the payment front end and ensure that the data is processed but not stored. Most payment systems have ‘dummy’ interfaces for billing testing.
You then need a decent period of Alpha and Beta Testing.

You will find that there are quite a few libraries and Django apps already written that can do many of the above. Customer accounts are suprisingly easy if you use the Django authorisation system - but making sure you get customer data isolation is more difficult and needs a lot of testing
A special note about Python - Although Python is often ‘dismissed’ as a scripting language and most Python programs and libraries are distributed as source code, it is entirely possible to distribute a python program in it’s binary pre-compiled form (which the exception of one entry point script which must be shipped as python script text file).

Tony Flury
, Python s/w developer since 2011 - published since 2015
Answered April 2, 2019

What is the difference between __getattr__ and __getattribute__ - when are they called ?
What are the conditions under which the the right hand operator family of magic method are called (for instance __radd__, __rmul__)
Under what conditions should you make a class hashable
Explain the difference between a Iterator and Iterable
What is needed to make a class iterable
What is required to make a class a context manager.

Which inheritance is better for resuability of program (a multilevel inheritance or a multiple inheritance)?
Different tools solve different problems.

A good pattern for using multiple inheritance is the mixin pattern - a small class that extends functionality which can be reused within many different sub classes. For instance you have a base class called Form which has methods render, get and post (and others); and you have a mixin class called LoginRequired, which extends render. You can inherit from the Form class which will display a form regardless of whether the user is logged in, or from both LoginRequired and Form classes to have a form which can only displays when the user is logged in.

Without Multiple Inheritance the only option would be to have a Form class, a LoginRequiredForm class which inherits from Form and then your actual form has to inherit from one of the other. And then it becomes more complex if for instance some forms have a different layout to the normal, and some require certain user permissions and some don’t. With three possible options you could either have upto 6 bases classes (one for every possible combination of options) or One base class and three mixins (one for each option).

multiple level inheritance is a very good pattern where there is a clear connection between the classes and you don’t need too many different options.

What would be a good database for a website that has messaging, posts, and descriptive markers on a map?
It isn’t the data items that are the issue here, any decent database (including SQLite) could store that data.

The key issues are:

data volumes - 1000s of rows, millions or more ?
Query volumes - a few queries per second, or a few thousand
Security - how sensitive is the data
Hosting - how easy is it to host your chosen database
The query and data volumes will of course vary across the different tables and if that variation is massive so you might want to pick a RDBMS where you can split you single database across different disk drives for example.

List some tricky questions in python?

Shankar Jha
·
April 8, 2019
Senior Python Developer (2016–present)
A nice answer is given by Tony Flury. I would like to add a few more on the top of this

How to create your own decorator, not using a predefined decorator such as static and class method.
How to write a proper unit test following the Test Driven Development paradigm.
How to look into dis module to see how python interprets your code internally.
Why set and dictionary are faster than list and tuple?
Why namedtuple is better than tuple?
What is multi-threading and how it is related to GIL(Global interpreter lock) issue?
How using a generator can save you a lot of memory.
What do you mean by maximum recursion depth in python?
How to use pdb debugger in your program.
How memory is managed in python? Is there any garbage collector available?
How to leverage the power of the special/dunder method to make your class more pythonic. check out all here 3. Data model - Python 3.7.3 documentation.